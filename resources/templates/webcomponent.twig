<link rel="import" href="{{ componentPolyfill }}">

{% set moduleName = (name ~ '-pattern') %}
{% set camelCased = moduleName |  title | replace({' ': '', '-': ''})  %}

{% for css in app_config.assets.custom.css.shared %}
    <link rel="import" href="{{ host }}{{ cssPrefix }}/{{ pattern }}/{{ css.name }}">
{% endfor %}

<dom-module id="{{ moduleName }}">
    <template>
        <!-- Shared style components -->
        {% for css in app_config.assets.custom.css.shared %}
            <style include="shared-style-{{ css.name }}"></style>
        {% endfor %}
        <!-- End of shared style components -->

        <!-- Embedded styles -->
        <style>{{ embeddedCSS }}</style>
        <!-- End of embedded styles -->

        <!-- Rendered pattern -->
        {%  include template ?: name ~ '.twig' %}
        <!-- End of rendered pattern -->
    </template>

    <script>

      class {{ camelCased }} extends Polymer.Element {
        static get is() {
          return "{{ moduleName }}";
        }

        // This is primarily here to instantiate the objects we use for state.
        constructor() {
          super();
          window.patterns = window.patterns || {};
        }

        // Defines the properties exposed on the element with data binding.
        static get properties() {
          return {
            {% for propertyname, propertyvalue in dynamicProperties %}

              {{ propertyname }}: {
                type: String,
                value: '{{ propertyvalue|escape('js') }}',
                notify: true,
                reflectToAttribute: true
              }{% if not loop.last %},{% endif %}
            {% endfor %}
          }
        }

        // Called every time the element is inserted into the DOM
        connectedCallback() {
          super.connectedCallback();

          // If an init function exists, call it.
          if (window.patterns['{{ moduleName }}']) {
            window.patterns['{{ moduleName }}'].connected();
          }
        }

        // Called every time the element is removed from the DOM.
        disconnectedCallback() {
          // If a disconnect function exists, call it.
          if (window.patterns['{{ moduleName }}']) {
            window.patterns['{{ moduleName }}'].disconnected();
          }
        }

        // Called when an attribute was added, removed, or updated
        attributeChangedCallback(attrName, oldVal, newVal) {
            // If a changed function exists, call it.
            if (window.patterns['{{ moduleName }}']) {
              window.patterns['{{ moduleName }}'].changed(attrName, oldVal, newVal);
            }

            this[attrName] = newVal;
        }

        // Called if the element has been moved into a new document
        // adoptedCallback() {}
      }
      customElements.define({{ camelCased }}.is, {{ camelCased }})
    </script>
</dom-module>